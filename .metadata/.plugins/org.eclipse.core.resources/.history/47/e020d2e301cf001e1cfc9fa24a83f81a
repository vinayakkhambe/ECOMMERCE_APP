package com.app.jwt;

import java.io.IOException;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.app.security.CustomUserDetailService;


@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

	@Autowired
	JwtAuthenticationHelper helper;
	
	@Autowired
	UserDetailsService custuserdetailservice;
	
//	@Override
//	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//			throws ServletException, IOException {
//
//		String requestheader = request.getHeader("Authorization");
//		
//		String username = null;
//		String token = null;
//		
//		//Bearer afasfasfsafasf
//		
//		if(requestheader !=null && requestheader.startsWith("Bearer"))
//		{
//			token = requestheader.substring(7);
//		    username = helper.getUserNameFromToken(token);
//		    
//			if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null)
//			{
//				UserDetails userDetails = custuserdetailservice.loadUserByUsername(username);
//				
//				if(!helper.isTokenExpired(token))
//				{
//					UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(token, null,userDetails.getAuthorities());
//					usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
//					SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
//				}
//				
//			}
//		}
//		  filterChain.doFilter(request, response);
//		
//	
//		
//	}
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		log.info("in once per request filter");
		// get authorization header n check if not null n starting with Bearer
		String header = request.getHeader("Authorization");
		if (header != null && header.startsWith("Bearer ")) {
			// Bearer token present --> extract n it validate
			String token = header.substring(7);
			if (utils.validateJwtToken(token)) {
				// valid token --> extract user name(email) from the token
				String userName = utils.getUserNameFromJwtToken(token);
				System.out.println(userName);
				if (userName != null && SecurityContextHolder.getContext().getAuthentication() == null) {
					// load user details from UserDetailsService
					UserDetails userDetails = userDetailsService.loadUserByUsername(userName);
			// create Authentication object , wrapping user details lifted from DB
					UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
							userDetails, null,userDetails.getAuthorities());
					// set details in authentication object. Above ctor sets authentication flag to
					// true => user already authenticated , so that other filters in the chain
					// should not attempt auth again
//					Save this authentication token in the sec ctx.
					SecurityContextHolder.getContext().setAuthentication(authentication);
				} else
					log.info("user name null or authentication already set , username {}", userName);

			}
		} else
			log.error("Request header DOES NOT contain a Bearer Token");
		// pass the request to the next filter in the chain
		filterChain.doFilter(request, response);

	}

}
